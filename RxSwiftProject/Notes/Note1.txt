PublishSubject: Starts empty and only emits new elements to subscribers. There is a possibility
that one or more items may be lost between the time the Subject is created and the observer
subscribes to it because PublishSubject starts emitting elements immediately upon creation.

BehaviorSubject: It needs an initial value and replays it or the latest element to new subscribers.
As BehaviorSubject always emits the latest element, you canâ€™t create one without giving a default
initial value. BehaviorSubject is helpful for depicting "values over time". For example, an event
stream of birthdays is a Subject, but the stream of a person's age would be a BehaviorSubject.

BehaviorSubject is a type of subject, a subject is a special type of observable so you can subscribe to messages like any other
observable. The unique features of BehaviorSubject are:

1.It needs an initial value as it must always return a value on subscription even if it hasn't received a next()
2. Upon subscription, it returns the last value of the subject. A regular observable only triggers when it receives an onnext
at any point, you can retrieve the last value of the subject in a non-observable code using the getValue() method.
3. Unique features of a subject compared to an observable are:
    a.It is an observer in addition to being an observable so you can also send values to a subject in addition to subscribing to it.
    b.In addition, you can get an observable from behavior subject using the asObservable() method on BehaviorSubject.

Observable is a Generic, and BehaviorSubject is technically a sub-type of Observable because BehaviorSubject is an observable with
specific qualities. You can't send values to an observable using next() method.

The Observable object represents a push based collection.

The Observer and Observable interfaces provide a generalized mechanism for push-based notification, also known as the observer
design pattern. The Observable object represents the object that sends notifications (the provider); the Observer object represents
the class that receives them (the observer).

The Subject class inherits both Observable and Observer, in the sense that it is both an observer and an observable. You can use a
subject to subscribe all the observers, and then subscribe the subject to a backend data source





